// <auto-generated />
using System;
using ApiPool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiPool.Data.Migrations
{
    [DbContext(typeof(ApiPoolContext))]
    [Migration("20221014210757_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("ApiPool.Models.Athletics.Athlete", b =>
                {
                    b.Property<int>("AthleteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AthleteId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Athletes");

                    b.HasData(
                        new
                        {
                            AthleteId = 1,
                            CompetitionId = 1,
                            Country = "USA",
                            DateOfBirth = new DateTime(1996, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Christian",
                            LastName = "Coleman"
                        },
                        new
                        {
                            AthleteId = 2,
                            CompetitionId = 1,
                            Country = "GBR",
                            DateOfBirth = new DateTime(1995, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Zharnel",
                            LastName = "Hughes"
                        },
                        new
                        {
                            AthleteId = 3,
                            CompetitionId = 6,
                            Country = "KEN",
                            DateOfBirth = new DateTime(1994, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Brigid",
                            LastName = "Kosgei"
                        },
                        new
                        {
                            AthleteId = 4,
                            CompetitionId = 6,
                            Country = "ETH",
                            DateOfBirth = new DateTime(1990, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Worknesh",
                            LastName = "Degefa"
                        },
                        new
                        {
                            AthleteId = 5,
                            CompetitionId = 7,
                            Country = "ETH",
                            DateOfBirth = new DateTime(1994, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Birhanu",
                            LastName = "Legese"
                        },
                        new
                        {
                            AthleteId = 6,
                            CompetitionId = 7,
                            Country = "KEN",
                            DateOfBirth = new DateTime(1988, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lawrence",
                            LastName = "Cherono"
                        },
                        new
                        {
                            AthleteId = 7,
                            CompetitionId = 2,
                            Country = "SWE",
                            DateOfBirth = new DateTime(1999, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Armand",
                            LastName = "Duplantis"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Athletics.Competition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompetitionId");

                    b.ToTable("Competitions");

                    b.HasData(
                        new
                        {
                            CompetitionId = 1,
                            EventName = "Men's 100m"
                        },
                        new
                        {
                            CompetitionId = 2,
                            EventName = "Men's Pole Vault"
                        },
                        new
                        {
                            CompetitionId = 3,
                            EventName = "Men's 50km Race Walking"
                        },
                        new
                        {
                            CompetitionId = 4,
                            EventName = "Women's 100m"
                        },
                        new
                        {
                            CompetitionId = 5,
                            EventName = "Women's 100m"
                        },
                        new
                        {
                            CompetitionId = 6,
                            EventName = "Women's Marathon"
                        },
                        new
                        {
                            CompetitionId = 7,
                            EventName = "Men's Marathon"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Countries.City", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CityName");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityName = "Los Angeles",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityName = "San Francisco",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityName = "San Diego",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityName = "Xiamen",
                            ProvinceId = 4
                        },
                        new
                        {
                            CityName = "Quanzhou",
                            ProvinceId = 4
                        },
                        new
                        {
                            CityName = "Ottawa",
                            ProvinceId = 6
                        },
                        new
                        {
                            CityName = "Windsor",
                            ProvinceId = 6
                        },
                        new
                        {
                            CityName = "Kingston",
                            ProvinceId = 6
                        },
                        new
                        {
                            CityName = "Mississauga",
                            ProvinceId = 6
                        },
                        new
                        {
                            CityName = "Hamilton",
                            ProvinceId = 6
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Continent", b =>
                {
                    b.Property<string>("ContinentName")
                        .HasColumnType("TEXT");

                    b.HasKey("ContinentName");

                    b.ToTable("Continents");

                    b.HasData(
                        new
                        {
                            ContinentName = "Africa"
                        },
                        new
                        {
                            ContinentName = "Asia"
                        },
                        new
                        {
                            ContinentName = "Europe"
                        },
                        new
                        {
                            ContinentName = "South America"
                        },
                        new
                        {
                            ContinentName = "Australia"
                        },
                        new
                        {
                            ContinentName = "North America"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Country", b =>
                {
                    b.Property<string>("CountryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("AreaSqKm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CapitalCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryName");

                    b.HasIndex("ContinentName");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryName = "Canada",
                            AreaSqKm = 9976140,
                            CapitalCity = "Ottawa",
                            ContinentName = "North America"
                        },
                        new
                        {
                            CountryName = "USA",
                            AreaSqKm = 9629091,
                            CapitalCity = "Washington DC",
                            ContinentName = "North America"
                        },
                        new
                        {
                            CountryName = "Brazil",
                            AreaSqKm = 8511965,
                            CapitalCity = "Brasilia",
                            ContinentName = "South America"
                        },
                        new
                        {
                            CountryName = "India",
                            AreaSqKm = 3287590,
                            CapitalCity = "New Delhi",
                            ContinentName = "Asia"
                        },
                        new
                        {
                            CountryName = "China",
                            AreaSqKm = 9596960,
                            CapitalCity = "Beijing",
                            ContinentName = "Asia"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CapitalCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryName");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            CapitalCity = "Montgomery",
                            CountryName = "USA",
                            Name = "Aalabama"
                        },
                        new
                        {
                            ProvinceId = 2,
                            CapitalCity = "Sacramento",
                            CountryName = "USA",
                            Name = "California"
                        },
                        new
                        {
                            ProvinceId = 3,
                            CapitalCity = "Honolulu",
                            CountryName = "USA",
                            Name = "Hawaii"
                        },
                        new
                        {
                            ProvinceId = 4,
                            CapitalCity = "Fuzhou",
                            CountryName = "China",
                            Name = "Fujian"
                        },
                        new
                        {
                            ProvinceId = 5,
                            CapitalCity = "Wuhan",
                            CountryName = "China",
                            Name = "Hubei"
                        },
                        new
                        {
                            ProvinceId = 6,
                            CapitalCity = "Toronto",
                            CountryName = "Canada",
                            Name = "Ontario"
                        },
                        new
                        {
                            ProvinceId = 7,
                            CapitalCity = "Edmopnton",
                            CountryName = "Canada",
                            Name = "Alberta"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Courses.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = "COMP2910",
                            InstructorId = 1,
                            Name = "Project Management"
                        },
                        new
                        {
                            CourseId = "COMP3973",
                            InstructorId = 2,
                            Name = "ASP.NET"
                        },
                        new
                        {
                            CourseId = "COMP3717",
                            InstructorId = 3,
                            Name = "Android"
                        },
                        new
                        {
                            CourseId = "COMP1536",
                            InstructorId = 4,
                            Name = "HTML & CSS"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Courses.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            Email = "zhang.liu@qq.com",
                            FirstName = "Zhang",
                            LastName = "Liu"
                        },
                        new
                        {
                            InstructorId = 2,
                            Email = "jin.ling@123.com",
                            FirstName = "Jin",
                            LastName = "Ling"
                        },
                        new
                        {
                            InstructorId = 3,
                            Email = "sam.sun@gmail.com",
                            FirstName = "Sam",
                            LastName = "Sun"
                        },
                        new
                        {
                            InstructorId = 4,
                            Email = "ann.fox@outlook.com",
                            FirstName = "Ann",
                            LastName = "Fox"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Foods.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("FoodId");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            FoodCategoryId = 1,
                            Name = "Croissant",
                            Unit = "dozen",
                            UnitPrice = 9.98f
                        },
                        new
                        {
                            FoodId = 2,
                            FoodCategoryId = 3,
                            Name = "Carrots",
                            Unit = "lbs",
                            UnitPrice = 0.98f
                        },
                        new
                        {
                            FoodId = 3,
                            FoodCategoryId = 2,
                            Name = "Apples",
                            Unit = "lbs",
                            UnitPrice = 0.65f
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Foods.FoodCategory", b =>
                {
                    b.Property<int>("FoodCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FoodCategoryId");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            FoodCategoryId = 1,
                            Description = "Bakery products, which include bread, rolls, \n                cookies, pies, pastries, and muffins, are usually prepared from flour \n                or meal derived from some form of grain. Bread, already a common \n                staple in prehistoric times, provides many nutrients in the human diet.",
                            Name = "Bakery"
                        },
                        new
                        {
                            FoodCategoryId = 2,
                            Description = "The sweet \n                and fleshy product of a tree or other plant that contains seed \n                and can be eaten as food.",
                            Name = "Fruit"
                        },
                        new
                        {
                            FoodCategoryId = 3,
                            Description = "A plant \n                or part of a plant used as food, typically as accompaniment to meat \n                or fish, such as a cabbage, potato, carrot, or bean.",
                            Name = "Vegetables"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Health.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            HospitalId = 1,
                            City = "Vancouver",
                            Country = "Canada",
                            Name = "St. Paul's Hospital",
                            Phone = "604-682-2344",
                            PostalCode = "V6Z 1Y6",
                            Province = "British Columbia",
                            Street = "1081 Burrard Street"
                        },
                        new
                        {
                            HospitalId = 2,
                            City = "Port Moody",
                            Country = "Canada",
                            Name = "Eagle Ridge Hospital",
                            Phone = "604-461-2022",
                            PostalCode = "V3H 3W9",
                            Province = "British Columbia",
                            Street = "475 Guildford Way"
                        },
                        new
                        {
                            HospitalId = 3,
                            City = "Vancouver",
                            Country = "Canada",
                            Name = "Vancouver General Hospital (VGH)",
                            Phone = "604-875-4111",
                            PostalCode = "V5Z 1M9",
                            Province = "British Columbia",
                            Street = "899 West 12th Avenue"
                        },
                        new
                        {
                            HospitalId = 4,
                            City = "Surrey",
                            Country = "Canada",
                            Name = "Surrey Memorial Hospital",
                            Phone = "604-581-2211",
                            PostalCode = "V3V 1Z2",
                            Province = "British Columbia",
                            Street = "13750 96th Avenue"
                        },
                        new
                        {
                            HospitalId = 5,
                            City = "New Westminster",
                            Country = "Canada",
                            Name = "Royal Columbian Hospital",
                            Phone = "604-520-4253",
                            PostalCode = "V3L 3W7",
                            Province = "British Columbia",
                            Street = "330 East Columbia Street"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Health.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dosage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DosageUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FrequencyInHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SicknessId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MedicineId");

                    b.HasIndex("SicknessId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            Dosage = 50,
                            DosageUnit = "mg",
                            FrequencyInHours = 8,
                            Name = "Acarbose",
                            SicknessId = 1
                        },
                        new
                        {
                            MedicineId = 2,
                            Dosage = 850,
                            DosageUnit = "mg",
                            FrequencyInHours = 12,
                            Name = "Metformin",
                            SicknessId = 1
                        },
                        new
                        {
                            MedicineId = 3,
                            Dosage = 150,
                            DosageUnit = "mg",
                            FrequencyInHours = 6,
                            Name = "Prazosin",
                            SicknessId = 2
                        },
                        new
                        {
                            MedicineId = 4,
                            Dosage = 180,
                            DosageUnit = "mg",
                            FrequencyInHours = 8,
                            Name = "Zoloft",
                            SicknessId = 2
                        },
                        new
                        {
                            MedicineId = 5,
                            Dosage = 20,
                            DosageUnit = "mg",
                            FrequencyInHours = 24,
                            Name = "Benicar",
                            SicknessId = 3
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Health.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<char>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PatientId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            City = "Delta",
                            Country = "Canada",
                            DateOfBirth = new DateTime(1987, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sam@fox.ca",
                            FirstName = "Sam",
                            Gender = 'M',
                            HospitalId = 1,
                            InDate = new DateTime(2020, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Fox",
                            OutDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "604-682-2344",
                            PostalCode = "V6Z 1Y6",
                            Province = "British Columbia",
                            RoomNumber = "204a",
                            Street = "1081 River Street"
                        },
                        new
                        {
                            PatientId = 2,
                            City = "Surrey",
                            Country = "Canada",
                            DateOfBirth = new DateTime(1980, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "meg@roy.ca",
                            FirstName = "Meg",
                            Gender = 'F',
                            HospitalId = 1,
                            InDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Roy",
                            OutDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "604-286-4432",
                            PostalCode = "V3Z 1P6",
                            Province = "British Columbia",
                            RoomNumber = "114b",
                            Street = "181 Alma Road"
                        },
                        new
                        {
                            PatientId = 3,
                            City = "Port Coquitlam",
                            Country = "Canada",
                            DateOfBirth = new DateTime(1977, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joe@day.ca",
                            FirstName = "Joe",
                            Gender = 'M',
                            HospitalId = 2,
                            InDate = new DateTime(2020, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Day",
                            OutDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "604-943-0807",
                            PostalCode = "V3P 2C4",
                            Province = "British Columbia",
                            RoomNumber = "304",
                            Street = "870 Pitt River Road"
                        },
                        new
                        {
                            PatientId = 4,
                            City = "Coquitlam",
                            Country = "Canada",
                            DateOfBirth = new DateTime(2005, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ann@lee.ca",
                            FirstName = "Ann",
                            Gender = 'F',
                            HospitalId = 2,
                            InDate = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Lee",
                            OutDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "604-942-9856",
                            PostalCode = "V6Y 2Y9",
                            Province = "British Columbia",
                            RoomNumber = "194",
                            Street = "1870 Ottawa Avenue"
                        },
                        new
                        {
                            PatientId = 5,
                            City = "New Wesminster",
                            Country = "Canada",
                            DateOfBirth = new DateTime(2015, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@ray.ca",
                            FirstName = "Bob",
                            Gender = 'M',
                            HospitalId = 3,
                            InDate = new DateTime(2020, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Ray",
                            OutDate = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "604-870-4031",
                            PostalCode = "V7W 2Y9",
                            Province = "British Columbia",
                            RoomNumber = "619a",
                            Street = "7045 Main Street"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Health.Sickness", b =>
                {
                    b.Property<int>("SicknessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SicknessName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SicknessId");

                    b.HasIndex("PatientId");

                    b.ToTable("Sicknesses");

                    b.HasData(
                        new
                        {
                            SicknessId = 1,
                            PatientId = 4,
                            SicknessName = "Diabetes"
                        },
                        new
                        {
                            SicknessId = 2,
                            PatientId = 4,
                            SicknessName = "PTSD"
                        },
                        new
                        {
                            SicknessId = 3,
                            PatientId = 2,
                            SicknessName = "High Blood Pressure"
                        },
                        new
                        {
                            SicknessId = 4,
                            PatientId = 3,
                            SicknessName = "COVID-19"
                        },
                        new
                        {
                            SicknessId = 5,
                            PatientId = 1,
                            SicknessName = "Maternity"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Movies.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            FirstName = "Ben",
                            LastName = "Kingsley",
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 2,
                            FirstName = "John",
                            LastName = "Gielgud",
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 3,
                            FirstName = "Rohini",
                            LastName = "Hattangadi",
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 4,
                            FirstName = "Julie",
                            LastName = "Andrews",
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 5,
                            FirstName = "Christopher",
                            LastName = "Plummer",
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 6,
                            FirstName = "Audrey",
                            LastName = "Hepburn",
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 7,
                            FirstName = "Rex",
                            LastName = "Harrison",
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Movies.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DirectorFirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectorLastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            DirectorFirstName = "Richard",
                            DirectorLastName = "Attenborough",
                            Name = "Gandhi",
                            Rating = "PG",
                            Year = 1982
                        },
                        new
                        {
                            MovieId = 2,
                            DirectorFirstName = "Robert",
                            DirectorLastName = "Wise",
                            Name = "The Sound of Music",
                            Rating = "G",
                            Year = 196
                        },
                        new
                        {
                            MovieId = 3,
                            DirectorFirstName = "George",
                            DirectorLastName = "Cukor",
                            Name = "My Fair Lady",
                            Rating = "PG",
                            Year = 1964
                        },
                        new
                        {
                            MovieId = 4,
                            DirectorFirstName = "Walter",
                            DirectorLastName = "Lang",
                            Name = "The King and I",
                            Rating = "G",
                            Year = 1956
                        },
                        new
                        {
                            MovieId = 5,
                            DirectorFirstName = "Hugh",
                            DirectorLastName = "Hudson",
                            Name = "Chariots of Fire",
                            Rating = "PG",
                            Year = 1981
                        },
                        new
                        {
                            MovieId = 6,
                            DirectorFirstName = "Stanley",
                            DirectorLastName = "Kubrick",
                            Name = "Spartacus",
                            Rating = "PG",
                            Year = 1960
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Restaurants.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MenuId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            Name = "Oven Baked Lasagna",
                            Price = 17.989999999999998,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuId = 2,
                            Name = "Spaghetti & Meatballs",
                            Price = 17.989999999999998,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuId = 3,
                            Name = "Seafood Fettuccine",
                            Price = 19.989999999999998,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuId = 4,
                            Name = "Barbecued Duck",
                            Price = 25.5,
                            RestaurantId = 2
                        },
                        new
                        {
                            MenuId = 5,
                            Name = "Roasted Pork",
                            Price = 9.75,
                            RestaurantId = 2
                        },
                        new
                        {
                            MenuId = 6,
                            Name = "Royal Hawaiian",
                            Price = 18.989999999999998,
                            RestaurantId = 3
                        },
                        new
                        {
                            MenuId = 7,
                            Name = "Royal Hawaiian",
                            Price = 27.989999999999998,
                            RestaurantId = 3
                        },
                        new
                        {
                            MenuId = 8,
                            Name = "Chicken Tikka",
                            Price = 4.9900000000000002,
                            RestaurantId = 4
                        },
                        new
                        {
                            MenuId = 9,
                            Name = "Butter Chicken",
                            Price = 12.99,
                            RestaurantId = 4
                        },
                        new
                        {
                            MenuId = 10,
                            Name = "Lamb Souvlaki",
                            Price = 19.0,
                            RestaurantId = 5
                        },
                        new
                        {
                            MenuId = 11,
                            Name = "Chili Chicken",
                            Price = 15.75,
                            RestaurantId = 6
                        },
                        new
                        {
                            MenuId = 12,
                            Name = "Yam Fries",
                            Price = 12.0,
                            RestaurantId = 6
                        },
                        new
                        {
                            MenuId = 13,
                            Name = "Sushi Cone",
                            Price = 6.25,
                            RestaurantId = 6
                        },
                        new
                        {
                            MenuId = 14,
                            Name = "Casar Salad",
                            Price = 13.0,
                            RestaurantId = 7
                        },
                        new
                        {
                            MenuId = 15,
                            Name = "Linguine Carbonara",
                            Price = 22.0,
                            RestaurantId = 7
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Restaurants.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            City = "Coquitlam",
                            Country = "Canada",
                            FoodType = "Western Food",
                            Phone = "(604) 705-0704",
                            PostalCode = "V5G 1U8",
                            Province = "British Columbia",
                            RestaurantName = "White Spot",
                            Street = "1096 Lougheed Highway"
                        },
                        new
                        {
                            RestaurantId = 2,
                            City = "Coquitlam",
                            Country = "Canada",
                            FoodType = "Chinese Food",
                            Phone = "(778) 298-0591",
                            PostalCode = "V6A 1C5",
                            Province = "British Columbia",
                            RestaurantName = "Hons",
                            Street = "310-3025 Lougheed Highway"
                        },
                        new
                        {
                            RestaurantId = 3,
                            City = "Port Coquitlam",
                            Country = "Canada",
                            FoodType = "Western Food",
                            Phone = "(604) 394-9339",
                            PostalCode = "V3B 8A4",
                            Province = "British Columbia",
                            RestaurantName = "Boston Pizza",
                            Street = "300 - 2325 Ottawa Street"
                        },
                        new
                        {
                            RestaurantId = 4,
                            City = "Maple Ridge",
                            Country = "Canada",
                            FoodType = "Indian Food",
                            Phone = "(604) 764-5639",
                            PostalCode = "V2X 1X6",
                            Province = "British Columbia",
                            RestaurantName = "Maple Leaf Indian Cuisine",
                            Street = "11956 207 Street"
                        },
                        new
                        {
                            RestaurantId = 5,
                            City = "Maple Ridge",
                            Country = "Canada",
                            FoodType = "Greek Food",
                            Phone = "(604) 554-6639",
                            PostalCode = "V2X 2P9",
                            Province = "British Columbia",
                            RestaurantName = "Socrates Grill",
                            Street = "20691 Lougheed Hwy #19"
                        },
                        new
                        {
                            RestaurantId = 6,
                            City = "Burnaby",
                            Country = "Canada",
                            FoodType = "Western",
                            Phone = "(604) 564-5639",
                            PostalCode = "V5C 6R5",
                            Province = "BC",
                            RestaurantName = "JOEY Burnaby",
                            Street = "109 - 1899 Rosser Ave"
                        },
                        new
                        {
                            RestaurantId = 7,
                            City = "Burnaby",
                            Country = "Canada",
                            FoodType = "Italian",
                            Phone = "(604) 424-8779",
                            PostalCode = "V5H 2A9",
                            Province = "BC",
                            RestaurantName = "Trattoria",
                            Street = "102 - 4501 Kingsway"
                        },
                        new
                        {
                            RestaurantId = 8,
                            City = "Burnaby",
                            Country = "Canada",
                            FoodType = "Western",
                            Phone = "(604) 291-6606",
                            PostalCode = "V6C 0A8",
                            Province = "BC",
                            RestaurantName = "Cactus Club Cafe",
                            Street = "4219 B Lougheed Hwy"
                        },
                        new
                        {
                            RestaurantId = 9,
                            City = "Burnaby",
                            Country = "Canada",
                            FoodType = "Pub",
                            Phone = "(604) 453-0811",
                            PostalCode = "V5G 1C7",
                            Province = "BC",
                            RestaurantName = "Personas Patio Restaurant And Lounge",
                            Street = "4331 Dominion St"
                        },
                        new
                        {
                            RestaurantId = 10,
                            City = "Burnaby",
                            Country = "Canada",
                            FoodType = "NW plates",
                            Phone = "(604) 298-4278",
                            PostalCode = "V5E 4H3",
                            Province = "BC",
                            RestaurantName = "Hart House Restaurant",
                            Street = "6664 Deer Lake Ave"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Species.Organism", b =>
                {
                    b.Property<int>("OrganismId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecieName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrganismId");

                    b.HasIndex("SpecieName");

                    b.ToTable("Organisms");

                    b.HasData(
                        new
                        {
                            OrganismId = 1,
                            Name = "Australian brush turkey",
                            SpecieName = "Bird"
                        },
                        new
                        {
                            OrganismId = 2,
                            Name = "Egyptian plover",
                            SpecieName = "Bird"
                        },
                        new
                        {
                            OrganismId = 3,
                            Name = "White stork",
                            SpecieName = "Bird"
                        },
                        new
                        {
                            OrganismId = 4,
                            Name = "Kingfisher",
                            SpecieName = "Bird"
                        },
                        new
                        {
                            OrganismId = 5,
                            Name = "Atlantic salmon",
                            SpecieName = "Fish"
                        },
                        new
                        {
                            OrganismId = 6,
                            Name = "Great white shark",
                            SpecieName = "Fish"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Species.Specie", b =>
                {
                    b.Property<string>("SpecieName")
                        .HasColumnType("TEXT");

                    b.HasKey("SpecieName");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            SpecieName = "Bird"
                        },
                        new
                        {
                            SpecieName = "Mammal"
                        },
                        new
                        {
                            SpecieName = "Insect"
                        },
                        new
                        {
                            SpecieName = "Reptile"
                        },
                        new
                        {
                            SpecieName = "Fish"
                        },
                        new
                        {
                            SpecieName = "Amphibians"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Sports.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamName");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            FirstName = "Bob",
                            LastName = "Fox",
                            Position = "Forward",
                            TeamName = "Canucks"
                        },
                        new
                        {
                            PlayerId = 2,
                            FirstName = "Sam",
                            LastName = "Dix",
                            Position = "Left Wing",
                            TeamName = "Canucks"
                        },
                        new
                        {
                            PlayerId = 3,
                            FirstName = "John",
                            LastName = "Rooster",
                            Position = "Right Wing",
                            TeamName = "Flames"
                        },
                        new
                        {
                            PlayerId = 4,
                            FirstName = "Pat",
                            LastName = "Plumber",
                            Position = "Defense",
                            TeamName = "Oilers"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Sports.Team", b =>
                {
                    b.Property<string>("TeamName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.HasKey("TeamName");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamName = "Canucks",
                            City = "Vancouver",
                            Country = "Canada",
                            Province = "BC"
                        },
                        new
                        {
                            TeamName = "Sharks",
                            City = "San Jose",
                            Country = "USA",
                            Province = "CA"
                        },
                        new
                        {
                            TeamName = "Oilers",
                            City = "Edmonton",
                            Country = "Canada",
                            Province = "AB"
                        },
                        new
                        {
                            TeamName = "Flames",
                            City = "Calgary",
                            Country = "Canada",
                            Province = "AB"
                        },
                        new
                        {
                            TeamName = "Ducks",
                            City = "Anaheim",
                            Country = "USA",
                            Province = "CA"
                        },
                        new
                        {
                            TeamName = "Lightening",
                            City = "Tampa Bay",
                            Country = "USA",
                            Province = "FL"
                        },
                        new
                        {
                            TeamName = "Blackhawks",
                            City = "Chicago",
                            Country = "USA",
                            Province = "IL"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Students.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            FirstName = "Tom",
                            LastName = "Max",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 2,
                            FirstName = "Ann",
                            LastName = "Fay",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 3,
                            FirstName = "Joe",
                            LastName = "Sun",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 4,
                            FirstName = "Sue",
                            LastName = "Fox",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 5,
                            FirstName = "Ben",
                            LastName = "Ray",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 6,
                            FirstName = "Zoe",
                            LastName = "Cox",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 7,
                            FirstName = "Sam",
                            LastName = "Ray",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 8,
                            FirstName = "Dan",
                            LastName = "Ash",
                            School = "Medicine"
                        },
                        new
                        {
                            StudentId = 9,
                            FirstName = "Pat",
                            LastName = "Lee",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 10,
                            FirstName = "Kim",
                            LastName = "Day",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 11,
                            FirstName = "Tim",
                            LastName = "Rex",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 12,
                            FirstName = "Rob",
                            LastName = "Ram",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 13,
                            FirstName = "Jan",
                            LastName = "Fry",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 14,
                            FirstName = "Jim",
                            LastName = "Tex",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 15,
                            FirstName = "Ben",
                            LastName = "Kid",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 16,
                            FirstName = "Mia",
                            LastName = "Chu",
                            School = "Medicine"
                        },
                        new
                        {
                            StudentId = 17,
                            FirstName = "Ted",
                            LastName = "Tao",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 18,
                            FirstName = "Amy",
                            LastName = "Day",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 19,
                            FirstName = "Ian",
                            LastName = "Roy",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 20,
                            FirstName = "Liz",
                            LastName = "Kit",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 21,
                            FirstName = "Mat",
                            LastName = "Tan",
                            School = "Medicine"
                        },
                        new
                        {
                            StudentId = 22,
                            FirstName = "Deb",
                            LastName = "Roy",
                            School = "Medicine"
                        },
                        new
                        {
                            StudentId = 23,
                            FirstName = "Ana",
                            LastName = "Ray",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 24,
                            FirstName = "Lyn",
                            LastName = "Poe",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 25,
                            FirstName = "Amy",
                            LastName = "Raj",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 26,
                            FirstName = "Kim",
                            LastName = "Ash",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 27,
                            FirstName = "Bec",
                            LastName = "Kid",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 28,
                            FirstName = "Eva",
                            LastName = "Fry",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 29,
                            FirstName = "Eli",
                            LastName = "Lap",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 30,
                            FirstName = "Sam",
                            LastName = "Yim",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 31,
                            FirstName = "Joe",
                            LastName = "Hui",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 32,
                            FirstName = "Liz",
                            LastName = "Jin",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 33,
                            FirstName = "Ric",
                            LastName = "Kuo",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 34,
                            FirstName = "Pam",
                            LastName = "Mak",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 35,
                            FirstName = "Cat",
                            LastName = "Yao",
                            School = "Medicine"
                        },
                        new
                        {
                            StudentId = 36,
                            FirstName = "Lou",
                            LastName = "Zhu",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 37,
                            FirstName = "Tom",
                            LastName = "Dag",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 38,
                            FirstName = "Stu",
                            LastName = "Day",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 39,
                            FirstName = "Tom",
                            LastName = "Gad",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 40,
                            FirstName = "Bob",
                            LastName = "Bee",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 41,
                            FirstName = "Jim",
                            LastName = "Ots",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 42,
                            FirstName = "Tom",
                            LastName = "Mag",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 43,
                            FirstName = "Hal",
                            LastName = "Doe",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 44,
                            FirstName = "Roy",
                            LastName = "Kim",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 45,
                            FirstName = "Vis",
                            LastName = "Cox",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 46,
                            FirstName = "Kay",
                            LastName = "Aga",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 47,
                            FirstName = "Reo",
                            LastName = "Hui",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 48,
                            FirstName = "Bob",
                            LastName = "Roe",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 49,
                            FirstName = "Jay",
                            LastName = "Eff",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 50,
                            FirstName = "Eva",
                            LastName = "Chu",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 51,
                            FirstName = "Lex",
                            LastName = "Rae",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 52,
                            FirstName = "Lin",
                            LastName = "Dex",
                            School = "Mining"
                        },
                        new
                        {
                            StudentId = 53,
                            FirstName = "Tom",
                            LastName = "Dag",
                            School = "Business"
                        },
                        new
                        {
                            StudentId = 54,
                            FirstName = "Ben",
                            LastName = "Shy",
                            School = "Computing"
                        },
                        new
                        {
                            StudentId = 55,
                            FirstName = "Rob",
                            LastName = "Bos",
                            School = "Nursing"
                        },
                        new
                        {
                            StudentId = 56,
                            FirstName = "Ali",
                            LastName = "Mac",
                            School = "Business"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Toons.Toon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Votes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Toons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Fred",
                            Gender = "M",
                            LastName = "Flintstone",
                            Occupation = "Mining Manager",
                            PictureUrl = "images/flintstone/fred.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Barney",
                            Gender = "M",
                            LastName = "Rubble",
                            Occupation = "Mining Assistant",
                            PictureUrl = "images/flintstone/barney.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Betty",
                            Gender = "F",
                            LastName = "Rubble",
                            Occupation = "Nurse",
                            PictureUrl = "images/flintstone/betty.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Wilma",
                            Gender = "F",
                            LastName = "Flintstone",
                            Occupation = "Teacher",
                            PictureUrl = "images/flintstone/wilma.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Bambam",
                            Gender = "M",
                            LastName = "Rubble",
                            Occupation = "Baby",
                            PictureUrl = "images/flintstone/bambam.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Pebbles",
                            Gender = "M",
                            LastName = "Flintstone",
                            Occupation = "Baby",
                            PictureUrl = "images/flintstone/pebbles.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Dino",
                            Gender = "F",
                            LastName = "Flintstone",
                            Occupation = "Pet",
                            PictureUrl = "images/flintstone/dino.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Micky",
                            Gender = "M",
                            LastName = "Mouse",
                            Occupation = "Hunter",
                            PictureUrl = "images/disney/MickyMouse.png",
                            Votes = 0
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Donald",
                            Gender = "M",
                            LastName = "Duck",
                            Occupation = "Sailor",
                            PictureUrl = "images/disney/DonaldDuck.png",
                            Votes = 0
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleManufacturerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Model");

                    b.HasIndex("VehicleManufacturerName");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Model = "Corolla",
                            Fuel = "Gas",
                            Type = "Sedan",
                            VehicleManufacturerName = "Toyota"
                        },
                        new
                        {
                            Model = "Rav4",
                            Fuel = "Gas",
                            Type = "SUV",
                            VehicleManufacturerName = "Toyota"
                        },
                        new
                        {
                            Model = "Soul",
                            Fuel = "Electric",
                            Type = "SUV",
                            VehicleManufacturerName = "Kia"
                        },
                        new
                        {
                            Model = "Model S",
                            Fuel = "Electric",
                            Type = "Sedan",
                            VehicleManufacturerName = "Tesla"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Vehicles.VehicleManufacturer", b =>
                {
                    b.Property<string>("VehicleManufacturerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VehicleManufacturerName");

                    b.ToTable("VehicleManufacturers");

                    b.HasData(
                        new
                        {
                            VehicleManufacturerName = "Toyota",
                            Country = "Japan"
                        },
                        new
                        {
                            VehicleManufacturerName = "Kia",
                            Country = "South Korea"
                        },
                        new
                        {
                            VehicleManufacturerName = "Renault",
                            Country = "France"
                        },
                        new
                        {
                            VehicleManufacturerName = "Mercedes",
                            Country = "Germany"
                        },
                        new
                        {
                            VehicleManufacturerName = "Tesla",
                            Country = "USA"
                        });
                });

            modelBuilder.Entity("ApiPool.Models.Athletics.Athlete", b =>
                {
                    b.HasOne("ApiPool.Models.Athletics.Competition", "Competition")
                        .WithMany("Athletes")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("ApiPool.Models.Countries.City", b =>
                {
                    b.HasOne("ApiPool.Models.Countries.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Country", b =>
                {
                    b.HasOne("ApiPool.Models.Countries.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Province", b =>
                {
                    b.HasOne("ApiPool.Models.Countries.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ApiPool.Models.Courses.Course", b =>
                {
                    b.HasOne("ApiPool.Models.Courses.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ApiPool.Models.Foods.Food", b =>
                {
                    b.HasOne("ApiPool.Models.Foods.FoodCategory", "FoodCategory")
                        .WithMany("Foods")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodCategory");
                });

            modelBuilder.Entity("ApiPool.Models.Health.Medicine", b =>
                {
                    b.HasOne("ApiPool.Models.Health.Sickness", "Sickness")
                        .WithMany("Medicines")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sickness");
                });

            modelBuilder.Entity("ApiPool.Models.Health.Patient", b =>
                {
                    b.HasOne("ApiPool.Models.Health.Hospital", "Hospital")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("ApiPool.Models.Health.Sickness", b =>
                {
                    b.HasOne("ApiPool.Models.Health.Patient", "Patient")
                        .WithMany("Sicknesses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ApiPool.Models.Movies.Actor", b =>
                {
                    b.HasOne("ApiPool.Models.Movies.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ApiPool.Models.Restaurants.Menu", b =>
                {
                    b.HasOne("ApiPool.Models.Restaurants.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("ApiPool.Models.Species.Organism", b =>
                {
                    b.HasOne("ApiPool.Models.Species.Specie", "Specie")
                        .WithMany("Organisms")
                        .HasForeignKey("SpecieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("ApiPool.Models.Sports.Player", b =>
                {
                    b.HasOne("ApiPool.Models.Sports.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamName");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ApiPool.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("ApiPool.Models.Vehicles.VehicleManufacturer", "VehicleManufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleManufacturerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleManufacturer");
                });

            modelBuilder.Entity("ApiPool.Models.Athletics.Competition", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("ApiPool.Models.Countries.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ApiPool.Models.Courses.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ApiPool.Models.Foods.FoodCategory", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("ApiPool.Models.Health.Hospital", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ApiPool.Models.Health.Patient", b =>
                {
                    b.Navigation("Sicknesses");
                });

            modelBuilder.Entity("ApiPool.Models.Health.Sickness", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ApiPool.Models.Movies.Movie", b =>
                {
                    b.Navigation("Actors");
                });

            modelBuilder.Entity("ApiPool.Models.Restaurants.Restaurant", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("ApiPool.Models.Species.Specie", b =>
                {
                    b.Navigation("Organisms");
                });

            modelBuilder.Entity("ApiPool.Models.Sports.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("ApiPool.Models.Vehicles.VehicleManufacturer", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
